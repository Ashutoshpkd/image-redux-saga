{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/my-react-app/src/components/Chart/Chart.js\";\nimport React from 'react';\nimport * as S from './Chart.style';\nimport ChartBar from './ChartBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = props => {\n  let expensesArray = [{\n    label: 'Jan',\n    value: 0\n  }, {\n    label: 'Jan',\n    value: 0\n  }, {\n    label: 'Feb',\n    value: 0\n  }, {\n    label: 'Mar',\n    value: 0\n  }, {\n    label: 'Apr',\n    value: 0\n  }, {\n    label: 'May',\n    value: 0\n  }, {\n    label: 'June',\n    value: 0\n  }, {\n    label: 'Jul',\n    value: 0\n  }, {\n    label: 'Aug',\n    value: 0\n  }, {\n    label: 'Sept',\n    value: 0\n  }, {\n    label: 'Oct',\n    value: 0\n  }, {\n    label: 'Nov',\n    value: 0\n  }, {\n    label: 'Dec',\n    value: 0\n  }];\n  const valueArray = props.expenses && props.expenses.map(expense => expense.value);\n  const maxInYear = Math.max(...valueArray);\n\n  if (props.expenses) {\n    for (const expense of props.expenses) {\n      const month = expense.date.getMonth();\n      expensesArray[month].value += expense.value;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(S.Chart, {\n    children: expensesArray.map(expense => {\n      /*#__PURE__*/\n      _jsxDEV(ChartBar, {\n        label: expense.label,\n        value: expense.value,\n        maxValue: maxInYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/my-react-app/src/components/Chart/Chart.js"],"names":["React","S","ChartBar","Chart","props","expensesArray","label","value","valueArray","expenses","map","expense","maxInYear","Math","max","month","date","getMonth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,MAAIC,aAAa,GAAG,CAAC;AAACC,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAAD,EAA2B;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAA3B,EAAqD;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAArD,EAA+E;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAA/E,EACpB;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADoB,EACM;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADN,EACgC;AAACD,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GADhC,EAC2D;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAD3D,EACqF;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADrF,EAEpB;AAACD,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAFoB,EAEO;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFP,EAEiC;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAFjC,EAE2D;AAACD,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAF3D,CAApB;AAIA,QAAMC,UAAU,GAAGJ,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAcA,OAAO,CAACJ,KAAzC,CAArC;AAEA,QAAMK,SAAS,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGN,UAAZ,CAAlB;;AAEA,MAAIJ,KAAK,CAACK,QAAV,EAAoB;AAChB,SAAK,MAAME,OAAX,IAAsBP,KAAK,CAACK,QAA5B,EAAsC;AAClC,YAAMM,KAAK,GAAGJ,OAAO,CAACK,IAAR,CAAaC,QAAb,EAAd;AACAZ,MAAAA,aAAa,CAACU,KAAD,CAAb,CAAqBR,KAArB,IAA8BI,OAAO,CAACJ,KAAtC;AACH;AACJ;;AAED,sBACI,QAAC,CAAD,CAAG,KAAH;AAAA,cACKF,aAAa,CAACK,GAAd,CAAmBC,OAAD,IAAa;AAChC;AAAA,cAAC,QAAD;AACA,QAAA,KAAK,EAAEA,OAAO,CAACL,KADf;AAEA,QAAA,KAAK,EAAEK,OAAO,CAACJ,KAFf;AAGA,QAAA,QAAQ,EAAEK;AAHV;AAAA;AAAA;AAAA;AAAA;AAKC,KANA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA5BD;;KAAMT,K;AA8BN,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport * as S from './Chart.style';\nimport ChartBar from './ChartBar';\n\nconst Chart = (props) => {\n    let expensesArray = [{label: 'Jan', value: 0}, {label: 'Jan', value: 0}, {label: 'Feb', value: 0}, {label: 'Mar', value: 0},\n    {label: 'Apr', value: 0}, {label: 'May', value: 0}, {label: 'June', value: 0}, {label: 'Jul', value: 0}, {label: 'Aug', value: 0},\n    {label: 'Sept', value: 0}, {label: 'Oct', value: 0}, {label: 'Nov', value: 0}, {label: 'Dec', value: 0},];\n\n    const valueArray = props.expenses && props.expenses.map((expense) => (expense.value));\n\n    const maxInYear = Math.max(...valueArray);\n\n    if (props.expenses) {\n        for (const expense of props.expenses) {\n            const month = expense.date.getMonth();\n            expensesArray[month].value += expense.value;\n        }\n    }\n\n    return (\n        <S.Chart>\n            {expensesArray.map((expense) => {\n            <ChartBar\n            label={expense.label}\n            value={expense.value}\n            maxValue={maxInYear} \n            />\n            })}\n        </S.Chart>\n    );\n\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}