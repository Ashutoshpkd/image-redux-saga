{"ast":null,"code":"var _jsxFileName = \"/Users/ashpawad/Documents/Practice/Udemy/React-Projects/my-react-app/src/components/Chart/Chart.js\";\nimport React from 'react';\nimport * as S from './Chart.style';\nimport ChartBar from './ChartBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = props => {\n  let expensesArray = [{\n    label: 'Jan',\n    value: 0\n  }, {\n    label: 'Feb',\n    value: 0\n  }, {\n    label: 'Mar',\n    value: 0\n  }, {\n    label: 'Apr',\n    value: 0\n  }, {\n    label: 'May',\n    value: 0\n  }, {\n    label: 'June',\n    value: 0\n  }, {\n    label: 'Jul',\n    value: 0\n  }, {\n    label: 'Aug',\n    value: 0\n  }, {\n    label: 'Sept',\n    value: 0\n  }, {\n    label: 'Oct',\n    value: 0\n  }, {\n    label: 'Nov',\n    value: 0\n  }, {\n    label: 'Dec',\n    value: 0\n  }];\n  const valueArray = props.expenses && props.expenses.map(expense => expense.amount);\n  const maxInYear = valueArray ? Math.max(...valueArray) : 0;\n\n  if (props.expenses) {\n    for (const expense of props.expenses) {\n      const month = expense.date.getMonth();\n      expensesArray[month].value += parseFloat(expense.amount);\n    }\n  }\n\n  console.log('ASHUTOSH');\n  return /*#__PURE__*/_jsxDEV(S.Chart, {\n    children: expensesArray.map(expense => {\n      /*#__PURE__*/\n      _jsxDEV(ChartBar, {\n        label: expense.label,\n        value: expense.value,\n        maxValue: maxInYear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/ashpawad/Documents/Practice/Udemy/React-Projects/my-react-app/src/components/Chart/Chart.js"],"names":["React","S","ChartBar","Chart","props","expensesArray","label","value","valueArray","expenses","map","expense","amount","maxInYear","Math","max","month","date","getMonth","parseFloat","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACrB,MAAIC,aAAa,GAAG,CAAC;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAAD,EAA6B;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAA7B,EAAyD;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAAzD,EACpB;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GADoB,EACQ;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GADR,EACoC;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GADpC,EACiE;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GADjE,EAC6F;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAD7F,EAEpB;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAFoB,EAES;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAFT,EAEqC;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAFrC,EAEiE;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAFjE,CAApB;AAIA,QAAMC,UAAU,GAAGJ,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeC,GAAf,CAAoBC,OAAD,IAAcA,OAAO,CAACC,MAAzC,CAArC;AACA,QAAMC,SAAS,GAAGL,UAAU,GAAGM,IAAI,CAACC,GAAL,CAAS,GAAGP,UAAZ,CAAH,GAA6B,CAAzD;;AAEA,MAAIJ,KAAK,CAACK,QAAV,EAAoB;AAChB,SAAK,MAAME,OAAX,IAAsBP,KAAK,CAACK,QAA5B,EAAsC;AAClC,YAAMO,KAAK,GAAGL,OAAO,CAACM,IAAR,CAAaC,QAAb,EAAd;AACAb,MAAAA,aAAa,CAACW,KAAD,CAAb,CAAqBT,KAArB,IAA8BY,UAAU,CAACR,OAAO,CAACC,MAAT,CAAxC;AACH;AACJ;;AAEDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AAEA,sBACI,QAAC,CAAD,CAAG,KAAH;AAAA,cACKhB,aAAa,CAACK,GAAd,CAAmBC,OAAD,IAAa;AAC5B;AAAA,cAAC,QAAD;AACI,QAAA,KAAK,EAAEA,OAAO,CAACL,KADnB;AAEI,QAAA,KAAK,EAAEK,OAAO,CAACJ,KAFnB;AAGI,QAAA,QAAQ,EAAEM;AAHd;AAAA;AAAA;AAAA;AAAA;AAKH,KANA;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA7BD;;KAAMV,K;AA+BN,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport * as S from './Chart.style';\nimport ChartBar from './ChartBar';\n\nconst Chart = (props) => {\n    let expensesArray = [{ label: 'Jan', value: 0 }, { label: 'Feb', value: 0 }, { label: 'Mar', value: 0 },\n    { label: 'Apr', value: 0 }, { label: 'May', value: 0 }, { label: 'June', value: 0 }, { label: 'Jul', value: 0 }, { label: 'Aug', value: 0 },\n    { label: 'Sept', value: 0 }, { label: 'Oct', value: 0 }, { label: 'Nov', value: 0 }, { label: 'Dec', value: 0 },];\n\n    const valueArray = props.expenses && props.expenses.map((expense) => (expense.amount));\n    const maxInYear = valueArray ? Math.max(...valueArray) : 0;\n\n    if (props.expenses) {\n        for (const expense of props.expenses) {\n            const month = expense.date.getMonth();\n            expensesArray[month].value += parseFloat(expense.amount);\n        }\n    }\n\n    console.log('ASHUTOSH');\n\n    return (\n        <S.Chart>\n            {expensesArray.map((expense) => {\n                <ChartBar\n                    label={expense.label}\n                    value={expense.value}\n                    maxValue={maxInYear}\n                />\n            })}\n        </S.Chart>\n    );\n\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}